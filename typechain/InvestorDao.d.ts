/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  BaseContract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import type { TypedEventFilter, TypedEvent, TypedListener } from "./common";

interface InvestorDaoInterface extends ethers.utils.Interface {
  functions: {
    "availableFunds()": FunctionFragment;
    "contributionEnd()": FunctionFragment;
    "createProposal(uint8,address,uint256)": FunctionFragment;
    "divest(uint256)": FunctionFragment;
    "executeProposal(uint256)": FunctionFragment;
    "getProposalsAmount()": FunctionFragment;
    "invest(uint256)": FunctionFragment;
    "proposals(uint256)": FunctionFragment;
    "quorum()": FunctionFragment;
    "vote(uint256)": FunctionFragment;
    "voteTime()": FunctionFragment;
    "voted(address,uint256)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "availableFunds",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "contributionEnd",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "createProposal",
    values: [BigNumberish, string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "divest",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "executeProposal",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getProposalsAmount",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "invest",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "proposals",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "quorum", values?: undefined): string;
  encodeFunctionData(functionFragment: "vote", values: [BigNumberish]): string;
  encodeFunctionData(functionFragment: "voteTime", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "voted",
    values: [string, BigNumberish]
  ): string;

  decodeFunctionResult(
    functionFragment: "availableFunds",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "contributionEnd",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "createProposal",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "divest", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "executeProposal",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getProposalsAmount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "invest", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "proposals", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "quorum", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "vote", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "voteTime", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "voted", data: BytesLike): Result;

  events: {
    "InvestorVoted(address,uint256,uint256)": EventFragment;
    "LiquidityDivested(address,uint256,uint256)": EventFragment;
    "LiquidityInvested(address,uint256)": EventFragment;
    "ProposalCreated(address,uint256,address,uint256,uint256)": EventFragment;
    "ProposalExecution(uint256,bool,uint8,address,uint256,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "InvestorVoted"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "LiquidityDivested"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "LiquidityInvested"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ProposalCreated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ProposalExecution"): EventFragment;
}

export type InvestorVotedEvent = TypedEvent<
  [string, BigNumber, BigNumber] & {
    user: string;
    investorWeight: BigNumber;
    proposalId: BigNumber;
  }
>;

export type LiquidityDivestedEvent = TypedEvent<
  [string, BigNumber, BigNumber] & {
    user: string;
    idaoAmount: BigNumber;
    weiAmount: BigNumber;
  }
>;

export type LiquidityInvestedEvent = TypedEvent<
  [string, BigNumber] & { user: string; daiAmount: BigNumber }
>;

export type ProposalCreatedEvent = TypedEvent<
  [string, BigNumber, string, BigNumber, BigNumber] & {
    user: string;
    id: BigNumber;
    token: string;
    amountToTrade: BigNumber;
    end: BigNumber;
  }
>;

export type ProposalExecutionEvent = TypedEvent<
  [BigNumber, boolean, number, string, BigNumber, BigNumber] & {
    proposalId: BigNumber;
    validated: boolean;
    proposalType: number;
    tokenBought: string;
    amountInvested: BigNumber;
    amountReceived: BigNumber;
  }
>;

export class InvestorDao extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: InvestorDaoInterface;

  functions: {
    availableFunds(overrides?: CallOverrides): Promise<[BigNumber]>;

    contributionEnd(overrides?: CallOverrides): Promise<[number]>;

    createProposal(
      proposalType: BigNumberish,
      token: string,
      amountToTrade: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    divest(
      idaoAmount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    executeProposal(
      proposalId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    getProposalsAmount(overrides?: CallOverrides): Promise<[BigNumber]>;

    invest(
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    proposals(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [number, number, number, string, BigNumber, BigNumber, boolean] & {
        id: number;
        end: number;
        proposalType: number;
        token: string;
        amountToTrade: BigNumber;
        votes: BigNumber;
        executed: boolean;
      }
    >;

    quorum(overrides?: CallOverrides): Promise<[number]>;

    vote(
      proposalId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    voteTime(overrides?: CallOverrides): Promise<[number]>;

    voted(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[boolean]>;
  };

  availableFunds(overrides?: CallOverrides): Promise<BigNumber>;

  contributionEnd(overrides?: CallOverrides): Promise<number>;

  createProposal(
    proposalType: BigNumberish,
    token: string,
    amountToTrade: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  divest(
    idaoAmount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  executeProposal(
    proposalId: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  getProposalsAmount(overrides?: CallOverrides): Promise<BigNumber>;

  invest(
    amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  proposals(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [number, number, number, string, BigNumber, BigNumber, boolean] & {
      id: number;
      end: number;
      proposalType: number;
      token: string;
      amountToTrade: BigNumber;
      votes: BigNumber;
      executed: boolean;
    }
  >;

  quorum(overrides?: CallOverrides): Promise<number>;

  vote(
    proposalId: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  voteTime(overrides?: CallOverrides): Promise<number>;

  voted(
    arg0: string,
    arg1: BigNumberish,
    overrides?: CallOverrides
  ): Promise<boolean>;

  callStatic: {
    availableFunds(overrides?: CallOverrides): Promise<BigNumber>;

    contributionEnd(overrides?: CallOverrides): Promise<number>;

    createProposal(
      proposalType: BigNumberish,
      token: string,
      amountToTrade: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    divest(idaoAmount: BigNumberish, overrides?: CallOverrides): Promise<void>;

    executeProposal(
      proposalId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    getProposalsAmount(overrides?: CallOverrides): Promise<BigNumber>;

    invest(amount: BigNumberish, overrides?: CallOverrides): Promise<void>;

    proposals(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [number, number, number, string, BigNumber, BigNumber, boolean] & {
        id: number;
        end: number;
        proposalType: number;
        token: string;
        amountToTrade: BigNumber;
        votes: BigNumber;
        executed: boolean;
      }
    >;

    quorum(overrides?: CallOverrides): Promise<number>;

    vote(proposalId: BigNumberish, overrides?: CallOverrides): Promise<void>;

    voteTime(overrides?: CallOverrides): Promise<number>;

    voted(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;
  };

  filters: {
    "InvestorVoted(address,uint256,uint256)"(
      user?: null,
      investorWeight?: null,
      proposalId?: null
    ): TypedEventFilter<
      [string, BigNumber, BigNumber],
      { user: string; investorWeight: BigNumber; proposalId: BigNumber }
    >;

    InvestorVoted(
      user?: null,
      investorWeight?: null,
      proposalId?: null
    ): TypedEventFilter<
      [string, BigNumber, BigNumber],
      { user: string; investorWeight: BigNumber; proposalId: BigNumber }
    >;

    "LiquidityDivested(address,uint256,uint256)"(
      user?: null,
      idaoAmount?: null,
      weiAmount?: null
    ): TypedEventFilter<
      [string, BigNumber, BigNumber],
      { user: string; idaoAmount: BigNumber; weiAmount: BigNumber }
    >;

    LiquidityDivested(
      user?: null,
      idaoAmount?: null,
      weiAmount?: null
    ): TypedEventFilter<
      [string, BigNumber, BigNumber],
      { user: string; idaoAmount: BigNumber; weiAmount: BigNumber }
    >;

    "LiquidityInvested(address,uint256)"(
      user?: null,
      daiAmount?: null
    ): TypedEventFilter<
      [string, BigNumber],
      { user: string; daiAmount: BigNumber }
    >;

    LiquidityInvested(
      user?: null,
      daiAmount?: null
    ): TypedEventFilter<
      [string, BigNumber],
      { user: string; daiAmount: BigNumber }
    >;

    "ProposalCreated(address,uint256,address,uint256,uint256)"(
      user?: null,
      id?: null,
      token?: null,
      amountToTrade?: null,
      end?: null
    ): TypedEventFilter<
      [string, BigNumber, string, BigNumber, BigNumber],
      {
        user: string;
        id: BigNumber;
        token: string;
        amountToTrade: BigNumber;
        end: BigNumber;
      }
    >;

    ProposalCreated(
      user?: null,
      id?: null,
      token?: null,
      amountToTrade?: null,
      end?: null
    ): TypedEventFilter<
      [string, BigNumber, string, BigNumber, BigNumber],
      {
        user: string;
        id: BigNumber;
        token: string;
        amountToTrade: BigNumber;
        end: BigNumber;
      }
    >;

    "ProposalExecution(uint256,bool,uint8,address,uint256,uint256)"(
      proposalId?: null,
      validated?: null,
      proposalType?: null,
      tokenBought?: null,
      amountInvested?: null,
      amountReceived?: null
    ): TypedEventFilter<
      [BigNumber, boolean, number, string, BigNumber, BigNumber],
      {
        proposalId: BigNumber;
        validated: boolean;
        proposalType: number;
        tokenBought: string;
        amountInvested: BigNumber;
        amountReceived: BigNumber;
      }
    >;

    ProposalExecution(
      proposalId?: null,
      validated?: null,
      proposalType?: null,
      tokenBought?: null,
      amountInvested?: null,
      amountReceived?: null
    ): TypedEventFilter<
      [BigNumber, boolean, number, string, BigNumber, BigNumber],
      {
        proposalId: BigNumber;
        validated: boolean;
        proposalType: number;
        tokenBought: string;
        amountInvested: BigNumber;
        amountReceived: BigNumber;
      }
    >;
  };

  estimateGas: {
    availableFunds(overrides?: CallOverrides): Promise<BigNumber>;

    contributionEnd(overrides?: CallOverrides): Promise<BigNumber>;

    createProposal(
      proposalType: BigNumberish,
      token: string,
      amountToTrade: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    divest(
      idaoAmount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    executeProposal(
      proposalId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    getProposalsAmount(overrides?: CallOverrides): Promise<BigNumber>;

    invest(
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    proposals(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    quorum(overrides?: CallOverrides): Promise<BigNumber>;

    vote(
      proposalId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    voteTime(overrides?: CallOverrides): Promise<BigNumber>;

    voted(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    availableFunds(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    contributionEnd(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    createProposal(
      proposalType: BigNumberish,
      token: string,
      amountToTrade: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    divest(
      idaoAmount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    executeProposal(
      proposalId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    getProposalsAmount(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    invest(
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    proposals(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    quorum(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    vote(
      proposalId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    voteTime(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    voted(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
