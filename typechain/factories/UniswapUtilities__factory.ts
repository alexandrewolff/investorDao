/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import { Provider, TransactionRequest } from "@ethersproject/providers";
import type {
  UniswapUtilities,
  UniswapUtilitiesInterface,
} from "../UniswapUtilities";

const _abi = [
  {
    inputs: [
      {
        internalType: "address",
        name: "_uniswapV2Router02",
        type: "address",
      },
    ],
    stateMutability: "nonpayable",
    type: "constructor",
  },
];

const _bytecode =
  "0x6080604052348015600f57600080fd5b5060405160cd38038060cd83398181016040526020811015602f57600080fd5b8101908080519060200190929190505050806000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050603f80608e6000396000f3fe6080604052600080fdfea2646970667358221220fe7795ceaad7c01ff40bbef1ee2259b3af6234d0a68c9c4fcadeb620e7959cd964736f6c634300060c0033";

export class UniswapUtilities__factory extends ContractFactory {
  constructor(
    ...args: [signer: Signer] | ConstructorParameters<typeof ContractFactory>
  ) {
    if (args.length === 1) {
      super(_abi, _bytecode, args[0]);
    } else {
      super(...args);
    }
  }

  deploy(
    _uniswapV2Router02: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<UniswapUtilities> {
    return super.deploy(
      _uniswapV2Router02,
      overrides || {}
    ) as Promise<UniswapUtilities>;
  }
  getDeployTransaction(
    _uniswapV2Router02: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(_uniswapV2Router02, overrides || {});
  }
  attach(address: string): UniswapUtilities {
    return super.attach(address) as UniswapUtilities;
  }
  connect(signer: Signer): UniswapUtilities__factory {
    return super.connect(signer) as UniswapUtilities__factory;
  }
  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): UniswapUtilitiesInterface {
    return new utils.Interface(_abi) as UniswapUtilitiesInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): UniswapUtilities {
    return new Contract(address, _abi, signerOrProvider) as UniswapUtilities;
  }
}
