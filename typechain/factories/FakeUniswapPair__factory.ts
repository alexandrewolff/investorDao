/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  Signer,
  utils,
  BigNumberish,
  Contract,
  ContractFactory,
  Overrides,
} from "ethers";
import { Provider, TransactionRequest } from "@ethersproject/providers";
import type {
  FakeUniswapPair,
  FakeUniswapPairInterface,
} from "../FakeUniswapPair";

const _abi = [
  {
    inputs: [
      {
        internalType: "address",
        name: "tokenA",
        type: "address",
      },
      {
        internalType: "address",
        name: "tokenB",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "amountA",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "amountB",
        type: "uint256",
      },
    ],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    inputs: [],
    name: "blockTimestampLast",
    outputs: [
      {
        internalType: "uint32",
        name: "",
        type: "uint32",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "token",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
    ],
    name: "decreaseReserve",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "getReserves",
    outputs: [
      {
        internalType: "uint112",
        name: "_reserve0",
        type: "uint112",
      },
      {
        internalType: "uint112",
        name: "_reserve1",
        type: "uint112",
      },
      {
        internalType: "uint32",
        name: "_blockTimestampLast",
        type: "uint32",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "token",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
    ],
    name: "increaseReserve",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "reserve0",
    outputs: [
      {
        internalType: "uint112",
        name: "",
        type: "uint112",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "reserve1",
    outputs: [
      {
        internalType: "uint112",
        name: "",
        type: "uint112",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "token",
        type: "address",
      },
      {
        internalType: "address",
        name: "to",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
    ],
    name: "send",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "token0",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "token1",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
];

const _bytecode =
  "0x608060405260006002601c6101000a81548163ffffffff021916908363ffffffff16021790555034801561003257600080fd5b50604051610ea1380380610ea18339818101604052608081101561005557600080fd5b8101908080519060200190929190805190602001909291908051906020019092919080519060200190929190505050610094848461014460201b60201c565b600080600160008491906101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508391906101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550505061012b84836102bb60201b60201c565b61013b83826102bb60201b60201c565b50505050610544565b6000808273ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff1614156101cc576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401808060200182810382526025815260200180610e516025913960400191505060405180910390fd5b8273ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff1610610206578284610209565b83835b8092508193505050600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1614156102b4576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252601e8152602001807f556e697377617056324c6962726172793a205a45524f5f41444452455353000081525060200191505060405180910390fd5b9250929050565b60008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1614806103625750600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff16145b6103b7576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252602b815260200180610e76602b913960400191505060405180910390fd5b8173ffffffffffffffffffffffffffffffffffffffff166340c10f1930836040518363ffffffff1660e01b8152600401808373ffffffffffffffffffffffffffffffffffffffff16815260200182815260200192505050600060405180830381600087803b15801561042857600080fd5b505af115801561043c573d6000803e3d6000fd5b5050505060008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff16146104eb57806002600e8282829054906101000a90046dffffffffffffffffffffffffffff160192506101000a8154816dffffffffffffffffffffffffffff02191690836dffffffffffffffffffffffffffff160217905561053f565b80600260008282829054906101000a90046dffffffffffffffffffffffffffff160192506101000a8154816dffffffffffffffffffffffffffff02191690836dffffffffffffffffffffffffffff16021790555b505050565b6108fe806105536000396000f3fe608060405234801561001057600080fd5b50600436106100935760003560e01c80635a76f25e116100665780635a76f25e146101ba57806386e2e20e146101e8578063c5700a0214610236578063d14499d11461025a578063d21220a7146102a857610093565b80630779afe6146100985780630902f1ac146101065780630dfe168114610158578063443cb4bc1461018c575b600080fd5b610104600480360360608110156100ae57600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803590602001909291905050506102dc565b005b61010e610398565b60405180846dffffffffffffffffffffffffffff168152602001836dffffffffffffffffffffffffffff1681526020018263ffffffff168152602001935050505060405180910390f35b6101606103f5565b604051808273ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b610194610419565b60405180826dffffffffffffffffffffffffffff16815260200191505060405180910390f35b6101c2610439565b60405180826dffffffffffffffffffffffffffff16815260200191505060405180910390f35b610234600480360360408110156101fe57600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080359060200190929190505050610459565b005b61023e61065b565b604051808263ffffffff16815260200191505060405180910390f35b6102a66004803603604081101561027057600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080359060200190929190505050610671565b005b6102b0610873565b604051808273ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b8273ffffffffffffffffffffffffffffffffffffffff1663a9059cbb83836040518363ffffffff1660e01b8152600401808373ffffffffffffffffffffffffffffffffffffffff16815260200182815260200192505050602060405180830381600087803b15801561034d57600080fd5b505af1158015610361573d6000803e3d6000fd5b505050506040513d602081101561037757600080fd5b8101908080519060200190929190505050506103938382610459565b505050565b6000806000600260009054906101000a90046dffffffffffffffffffffffffffff1692506002600e9054906101000a90046dffffffffffffffffffffffffffff1691506002601c9054906101000a900463ffffffff169050909192565b60008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b600260009054906101000a90046dffffffffffffffffffffffffffff1681565b6002600e9054906101000a90046dffffffffffffffffffffffffffff1681565b60008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1614806105005750600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff16145b610555576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252602f81526020018061089a602f913960400191505060405180910390fd5b60008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1614156106025780600260008282829054906101000a90046dffffffffffffffffffffffffffff160392506101000a8154816dffffffffffffffffffffffffffff02191690836dffffffffffffffffffffffffffff160217905550610657565b806002600e8282829054906101000a90046dffffffffffffffffffffffffffff160392506101000a8154816dffffffffffffffffffffffffffff02191690836dffffffffffffffffffffffffffff1602179055505b5050565b6002601c9054906101000a900463ffffffff1681565b60008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1614806107185750600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff16145b61076d576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252602f81526020018061089a602f913960400191505060405180910390fd5b60008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff16141561081a5780600260008282829054906101000a90046dffffffffffffffffffffffffffff160192506101000a8154816dffffffffffffffffffffffffffff02191690836dffffffffffffffffffffffffffff16021790555061086f565b806002600e8282829054906101000a90046dffffffffffffffffffffffffffff160192506101000a8154816dffffffffffffffffffffffffffff02191690836dffffffffffffffffffffffffffff1602179055505b5050565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff168156fe63616e206f6e6c7920757064617465207265736572766520666f7220746f6b656e73206f66207468697320706f6f6ca2646970667358221220ceb8c8c617de6614be7bdf47344bae1ffca6bf0b8e6ea529ccbd84697005b5d564736f6c634300060c0033556e697377617056324c6962726172793a204944454e544943414c5f41444452455353455363616e206f6e6c792067657420746f6b656e7320666f7220746f6b656e73206f66207468697320706f6f6c";

export class FakeUniswapPair__factory extends ContractFactory {
  constructor(
    ...args: [signer: Signer] | ConstructorParameters<typeof ContractFactory>
  ) {
    if (args.length === 1) {
      super(_abi, _bytecode, args[0]);
    } else {
      super(...args);
    }
  }

  deploy(
    tokenA: string,
    tokenB: string,
    amountA: BigNumberish,
    amountB: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<FakeUniswapPair> {
    return super.deploy(
      tokenA,
      tokenB,
      amountA,
      amountB,
      overrides || {}
    ) as Promise<FakeUniswapPair>;
  }
  getDeployTransaction(
    tokenA: string,
    tokenB: string,
    amountA: BigNumberish,
    amountB: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(
      tokenA,
      tokenB,
      amountA,
      amountB,
      overrides || {}
    );
  }
  attach(address: string): FakeUniswapPair {
    return super.attach(address) as FakeUniswapPair;
  }
  connect(signer: Signer): FakeUniswapPair__factory {
    return super.connect(signer) as FakeUniswapPair__factory;
  }
  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): FakeUniswapPairInterface {
    return new utils.Interface(_abi) as FakeUniswapPairInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): FakeUniswapPair {
    return new Contract(address, _abi, signerOrProvider) as FakeUniswapPair;
  }
}
